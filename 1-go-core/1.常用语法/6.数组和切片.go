package main

import "fmt"

/*
*
数组和切片的区别：
1.定义与声明

	数组：必须固定长度，声明时必须指定长度，长度是数组类型的一部分
	切片：是对数组的引用，长度是不固定，可以动态增长。由指向底层数组的指针，长度和容量组成

2.数组是值类型，切片是引用类型
2.长度和容量 :数组长度固定且和容量相等；切片长度和容量可以不相等可以通过len和cap函数获取
3.内存分配：数组在声明时就分配了内存空间，切片在使用时才分配内存空间
5.可变性：数组长度固定，不能动态增减元素；切片长度可变，可以通过append函数动态增加元素,当切片长度超过容量时，会自动扩容
*/
func main() {
	//1.定义与声明
	//数组：必须固定长度，声明时必须指定长度，长度是数组类型的一部分
	//切片：是对数组的引用，长度是不固定，可以动态增长。由指向底层数组的指针，长度和容量组成
	//数组
	var a [5]int
	a2 := [5]int{1, 2, 3, 4, 5}
	a3 := [...]int{1, 2, 3, 4, 5}
	fmt.Println(a, a2, a3)
	//切片
	var b []int                //这里没固定长度
	b2 := []int{1, 2, 3, 4, 5} //这里没固定长度5,固定容量5,并且初始化。
	fmt.Println(len(b2), cap(b2))

	b3 := make([]int, 5)     //长度和容量均为5
	b4 := make([]int, 5, 10) //长度是5， 容量是10
	b5 := a3[1:3]
	fmt.Println(b, b2, b3, b4, b5)

	//2.长度和容量 :数组长度固定且和容量相等； 切片长度和容量可以不相等可以通过len和cap函数获取

	//3.内存分配：数组在声明时就分配了内存空间，切片在使用时才分配内存空间

	//4.可变性：数组长度固定，不能动态增减元素；切片长度可变，可以通过append函数动态增加元素,当切片长度超过容量时，会自动扩容
	//5.数组是值类型，切片是引用类型

	//数组
	var x [3]int //定义
	fmt.Println(x)
	x[0] = 1 //赋值
	x[1] = 2
	x[2] = 3
	fmt.Println(x)

	y := []int{10, 20, 30} //定义+赋值
	fmt.Println(y)

	//切片-Go中没有List结构,可以用切片来代替
	//切片-就是一段值,本质上也是一个数组
	var z []int = y[1:2] //注意用的是:号, 取值范围是(]
	fmt.Println(z)

	//创建一个切片 make关键字
	xx := make([]int, 2, 10) //10表示切片容量大小是10, 2表示里面已经有2个元素（默认是0）
	fmt.Println(xx)

	//使用append追加数据
	xxx := make([]int, 2)      //可以只指定初始长度，不指定容量， 可以动态增长
	xxx = append(xxx, 1, 2, 3) //追加的时候是从初始长度往后追加的（定义式会定义初始长度）
	fmt.Println(xxx)

	//使用range遍历切片
	for _, v := range xxx { // _表示不关心这个值（忽略第一个值index, 只用第二个值value）
		fmt.Println(v)
	}

}
