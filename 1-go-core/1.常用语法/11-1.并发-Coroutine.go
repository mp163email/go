package main

/**

+----------------+         +-----------------+         +-------------------+
|     G1~G1000   |         |        G1001~G2000        |        G2001~G3000|
|  协程（G）任务池 |         |        协程任务池         |       协程任务池    |
+----------------+         +-----------------+         +-------------------+
        ↓                          ↓                            ↓

+-------------+     +-------------+     +-------------+     +-------------+
|     P0      |     |     P1      |     |     P2      |     |     P3      |
| Processor   |     | Processor   |     | Processor   |     | Processor   |
| 本地 G 队列 |     | 本地 G 队列 |     | 本地 G 队列 |     | 本地 G 队列 |
+-------------+     +-------------+     +-------------+     +-------------+
       ↓                  ↓                   ↓                  ↓

+-----------+      +-----------+      +-----------+      +-----------+
|    M0     |      |    M1     |      |    M2     |      |    M3     |
| OS线程    |      | OS线程    |      | OS线程    |      | OS线程    |
+-----------+      +-----------+      +-----------+      +-----------+

GMP模型：
	G-协成 M-线程 P-逻辑处理器
关系：
	1个M（线程）1对1绑定 1个P(逻辑处理器)， 1个P（逻辑处理器）有一个存着多个G(协成的队列)
	M通过P来处理G
Coroutine 读作： '刻入ten'
*/
import (
	"fmt"
	"time"
)

func say(s string) {
	for i := 0; i < 5; i++ {
		time.Sleep(1000 * time.Millisecond)
		fmt.Println(s)
	}
}

func main() {
	go say("hello") //调用非常简单 函数前面加上go关键字, 异步执行
	say("world")
}
